{"version":3,"sources":["logo.svg","serviceWorker.js","Components/Route.js","UserInfo.js","Components/Area.js","RouteFinder.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Route","React","Component","props","className","this","name","type","grade","stars","Area","renderContent","routeList","routes","subAreas","areas","map","el","state","open","e","setState","onClick","togglePanel","style","RouteFinder","loading","distance","lat","lon","routesRaw","getLocation","navigator","geolocation","getCurrentPosition","position","JSON","stringify","coords","latitude","longitude","error","getRoutes","a","preventDefault","routesCall","concat","fetch","response","json","catch","console","log","undefined","data","parseRoutes","i","length","push","rating","parseAreas","route","rootIndex","findIndex","area","loc_index","j","onSubmit","placeholder","value","onChange","target","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e1c27a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nexport default class Route extends React.Component{\n\n    constructor(props){\n        super(props);\n    }\n\n\n    render(){\n        return(\n            <div className=\"App\">\n                <h2>{this.props.name}</h2>\n                <div>Route type: {this.props.type} , Grade: {this.props.grade}, Stars: {this.props.stars}</div>\n            </div>\n    );}\n}","import React from 'react'\n\nexport default class UserInfo extends React.Component{\n\n    state = {\n        loading:true,\n        email:\"\",\n        msg1:\"Enter user email\",\n        user:null,\n        toDos:null,\n    }\n\n    handleSubmit = async e => {\n        e.preventDefault();\n        this.setState({msg1: \"Loading... \"});\n        //TODO****** figure out how keys work\n        const key = \"200479780-a90fe858ff8ad40200286ef496ad1160\";\n        const toDoUrl = 'https://www.mountainproject.com/data/get-to-dos?email=';\n        const toDoCall = toDoUrl.concat(this.state.email, \"&key=\", key);\n        const response = await fetch(toDoCall);\n        const data = await response.json().catch(e => console.log(\"no email input\"));\n        if(data !== undefined){\n            this.setState({toDos:data.toDos});\n            this.setState({loading:false}); \n        }else{\n            this.setState({toDos:[\"no user found\",\"\"]});\n            this.setState({loading:false});\n        }\n    }\n\n    renderTodos = () => {\n        let toDoList = [];\n        for(let i = 0; i<this.state.toDos.length; i++){\n            toDoList.push(<p>{this.state.toDos[i]}</p>);\n        }\n        return toDoList;\n    }\n\n    render(){\n        return(\n            <div  className=\"App\">\n                <form onSubmit={e => this.handleSubmit(e)}>\n                    <label>\n                        Email:  \n                        <input \n                            name=\"email\"\n                            type=\"text\"\n                            value={this.state.email}\n                            onChange={e => this.setState({[e.target.name]: e.target.value})}\n                        />\n                    </label>\n                    <input type=\"submit\" value=\"Submit\" />\n                </form>\n                {this.state.loading ?\n                    <div>{this.state.msg1}</div> : \n                    <div>\n                        <div> to dos: </div>\n                        <div>{this.renderTodos()}</div>\n                    </div>\n                }     \n            </div>\n    );}\n\n\n\n}","import React from 'react';\nexport default class Area extends React.Component{\n\n    //takes list of Routes 'routes', area name 'name'\n    //TODO** should have optional area param that allows for nesting\n    //TODO** make this collapsable\n    constructor(props){\n        super(props);\n        this.state = {\n            open: false\n        }\n    }\n\n    togglePanel(e){\n        this.setState({open: !this.state.open})\n    }\n\n    renderContent = () =>{\n        //routes are passed as jsx, areas are passed as array of data: [\"areaname\", [<<areas>>], [<<routes>>]]\n        let routeList = this.props.routes; //routes as list of jsx elements\n\n        let subAreas = this.props.areas.map( (el) => <Area \n            name = {el[0]}    \n            areas = {el[1]}\n            routes = {el[2]}\n        />)\n\n        return <div><li>{routeList}</li> <li>{subAreas}</li></div>;\n    }\n\n    render(){\n        return(\n            <div>\n                <h1 onClick={(e)=>this.togglePanel(e)} >{this.props.name}</h1>\n                {this.state.open ? <div style={{}}>{this.renderContent()}</div> : null}\n            </div>\n    );}\n\n\n    \n}","import React from 'react';\nimport Route from './Components/Route.js';\nimport Area from './Components/Area.js';\nimport './App.css';\n\nexport default class RouteFinder extends React.Component{\n\n    state={\n        loading: true,\n        distance:\"\",\n        lat:\"Getting your location . . . \",\n        lon:\"\",\n        routesRaw:null, //json object\n        routeList:[]   //list of all <Route> jsx objects\n    }\n\n    getLocation = () =>{\n        navigator.geolocation.getCurrentPosition( position => {\n            this.setState({lat:(JSON.stringify(position.coords.latitude))});\n            this.setState({lon:(JSON.stringify(position.coords.longitude))});\n        },\n        error => {\n            this.setState({coords:\"Please allow location services\"});\n        }\n        );\n    }\n\n    //gets routes as json\n    getRoutes = async (e) =>{\n        e.preventDefault();\n        //TODO****** figure out how keys work\n        const key = \"200479780-a90fe858ff8ad40200286ef496ad1160\";\n        const routesUrl = 'https://www.mountainproject.com/data/get-routes-for-lat-lon?';\n        const routesCall = routesUrl.concat(\"&lat=\"+this.state.lat+\"&lon=\"+this.state.lon+\"&key=\"+key+\"&maxDistance=\"+this.state.distance);\n        const response = await fetch(routesCall);\n        const data = await response.json().catch(e => console.log(\"bad input\"));\n        if(data !== undefined){\n            this.setState({routesRaw:data.routes});\n            this.parseRoutes();\n            this.setState({loading:false});\n        }else{\n            this.setState({routesRaw:[\"no routes found within specified distance\",\"\"]});\n            this.setState({loading:false});\n        }\n    }\n\n    //returns route objects in one list\n    parseRoutes = () =>{\n        console.log(\"parse routes\")\n        let routes = [];\n        for(let i = 0; i<this.state.routesRaw.length; i++){\n                routes.push(<Route \n                    name = {this.state.routesRaw[i].name}\n                    location = {this.state.routesRaw[i].location}\n                    type = {this.state.routesRaw[i].type}\n                    grade = {this.state.routesRaw[i].rating}\n                    stars = {this.state.routesRaw[i].stars}\n                />)\n        }\n        this.setState({routeList:routes});\n        // for(let i = 0; i<this.state.routeList.length; i++){\n        //     console.log(this.state.routeList[i].props.name)\n        // }\n    }\n\n    //splits list of routes into area objects\n    //TODO** check indexing\n    parseAreas = () =>{\n\n        console.log(\"parse areas\")\n\n        /*\n        example area = [\"area_name\", [\"sub-area1\", \"sub-area2\", ...], [\"route1\", \"route2\"]]\n        routes are only in added to bottom level area for that route\n        */\n\n        //for route in routes\n            //for location in route.locations\n                //if ! areas[] contains locations[0] - make callback where area[0] === location[0]\n                    //create new area\n                //area = areas[area_index]\n                //for route.locations[1 .. end]\n                    //if ! area[1] contains location\n                        //insert location into area\n                    //area = area[1][location]\n\n\n\n\n        //array of root areas (eg state / country)\n        let areas = []\n\n        for(let i = 0; i<this.state.routeList.length; i++){\n            let route = this.state.routeList[i]\n            let rootIndex = areas.findIndex((el) => el[0] === route.props.location[0])\n            if(rootIndex === -1){\n                areas.push([route.props.location[0], [], []])\n                rootIndex = areas.length-1\n            }\n            let area = areas[rootIndex]\n            let location = \"\";\n            let loc_index = -1;\n            for(let j = 1; j<route.props.location.length; j++){\n                location = route.props.location[j]\n                if(area != null){\n                    loc_index = area[1].findIndex((el) => el[0] === location)\n                }\n                if(loc_index === -1){\n                    area[1].push([location, [], []])\n                    loc_index = area[1].length-1\n                }\n                area = area[1][loc_index]\n            }\n            area[2].push(route)\n        }\n\n        return areas.map((area) => \n            <Area className=\"Nested-areas\"\n                name={area[0]}\n                areas={area[1]}\n                routes={ area[2] }       \n            />\n        )\n    }\n\n    render(){\n        this.getLocation();\n        return(\n            <div className=\"App\">\n                <form onSubmit={e => this.getRoutes(e)}>\n                    <label>\n                        Find routes\n                        <input\n                            placeholder=\"miles\"\n                            name=\"distance\"\n                            type=\"number\"\n                            value={this.state.distance}\n                            onChange={e => this.setState({[e.target.name]: e.target.value})}\n                        />\n                    </label>\n                    from you <input type=\"submit\" value=\"Submit\" />\n                </form>\n                        <div>Your location: {this.state.lat} , {this.state.lon}</div>\n                        {this.state.loading ?\n                            <div>Enter a distance to find routes</div> :\n                            <div>\n                                <div>Routes near you</div>\n                                <div>{this.parseAreas()}</div>\n                            </div>  \n                        }\n            </div>\n    );}\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport UserInfo from './UserInfo';\nimport RouteFinder from './RouteFinder';\n\nReactDOM.render(<RouteFinder />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}